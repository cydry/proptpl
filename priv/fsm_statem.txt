defmodule BaseTest do
  use ExUnit.Case
  use PropCheck
  use PropCheck.FSM


  ### PROPERTIES ###
  property "FSM Stateful Property", [:verbose] do
    forall cmds <- commands(__MODULE__) do
      ActualSystem.start_link()
      {history, state, result} = run_commands(__MODULE__, cmds)
      ActualSystem.stop()

      (result == :ok)
      |> aggregate(:proper_statem.zip(state_names(history), command_names(cmds)))
      |> when_fail(
        IO.puts('''
        History: #{inspect(history)}
        State: #{inspect(state)}
        Result: #{inspect(result)}
        ''')
      )
    end
  end


  ### MODEL ###
  def initial_state(), do: :on

  def initial_state_data(), do: %{}

  def on(_data) do
    [{:off, {:call, ActualSystem, :some_call, [term(), term()]}}]
  end

  def off(_data) do
    [{:off, {:call, ActualSystem, :some_call, [term(), term()]}},
     {:history, {:call, ActualSystem, :some_call, [term(), term()]}},
     {{:service,:sub,:state}, {:call, ActualSystem, :some_call, [term()]}}]
  end

  def service(_sub, _state, _data) do
    [{:on, {:call, ActualSystem, :some_call, [term(), term()]}}]
  end

  def weight(_fromstate, _tostate, _call), do: 1

  def precondition(_from, _to, _data, {:call, _mod, _fun, _args}) do
    true
  end

  def postcondition(_from, _to, _data, {:call, _mod, _fun, _args}, _res) do
    true
  end

  def next_state_data(_From, _to, data, _res, {:call, _mod, _fun, _args}) do
    new_data = data
    new_data
  end
end
